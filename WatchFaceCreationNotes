1) Selecting the "Watch Face" template presents you with a fully functioning watch face that you can customize.
2) The actual watch graphics are customized in the drawWatchface() method and called in the onDraw() method.
	2.1) hour ticks:
  
            val innerTickRadius = mCenterX - 10 // The end of the tick closest to the center will be the screen width -10
            val outerTickRadius = mCenterX      // The opposite end of the tick will be on the edge of the screen meaning the length of our hour ticks are 10
            for (tickIndex in 0..11) { //calculation to place hour ticks evenly across the edge of the device
                val tickRot = (tickIndex.toDouble() * Math.PI * 2.0 / 12).toFloat()
                val innerX = Math.sin(tickRot.toDouble()).toFloat() * innerTickRadius
                val innerY = (-Math.cos(tickRot.toDouble())).toFloat() * innerTickRadius
                val outerX = Math.sin(tickRot.toDouble()).toFloat() * outerTickRadius
                val outerY = (-Math.cos(tickRot.toDouble())).toFloat() * outerTickRadius
                canvas.drawLine(mCenterX + innerX, mCenterY + innerY,
                        mCenterX + outerX, mCenterY + outerY, mTickAndCirclePaint) //Draws the ticks on the screen
            }
            
	2.2) Hour text: Add "canvas.drawText(hour, (mCenterX + innerX), (mCenterY + innerY), mTickAndCirclePaint)" after the canvas.drawLine command (This needs work)
	
3) To change the watchface background, find the initializeBackground() function and and replace R.drawable._______ with R.drawable.yourimage.jpg. Remember to upload this file to app/res/drawable/.
4) You define the color, font, and size of lines or text by creating a Paint() object.
	4a) mSecondPaint = Paint().apply {
                color = mWatchHandHighlightColor
                strokeWidth = SECOND_TICK_STROKE_WIDTH
                isAntiAlias = true
                strokeCap = Paint.Cap.ROUND
                setShadowLayer(
                    SHADOW_RADIUS, 0f, 0f, mWatchHandShadowColor
                )
            }

            mTickAndCirclePaint = Paint().apply {
                color = mWatchHandColor
                strokeWidth = SECOND_TICK_STROKE_WIDTH
                isAntiAlias = true
                style = Paint.Style.STROKE
                setShadowLayer(
                    SHADOW_RADIUS, 0f, 0f, mWatchHandShadowColor
                )
            }
